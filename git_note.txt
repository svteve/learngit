1.Git简介
1.1.安装Git
打开输入Git，若没有安装，会提示sudo apt-get install git
安装完成之后，还需要最后一步设置，输入：
  git config --global user.name "Your Name"
  git config --global user.email  "email@example.com"

1.2.创建版本库（.git）
第一步：创建目录
  mkdir learngit(你自己喜欢的名字)
  cd learngit
  pwd
第二步: 把目录变成可以管理的仓库
  在当前目录下运行：git init
  用ls -al 可以看到隐藏的.git

2.时光机
创建文件readme.txt并写入内容，运行Git status查看结果可知，接下来要做的工作是
Git add <文件名> 添加进暂存区
Git commit -m <文件名> 提交进版本库
Git status这个命令可以让我们随时掌握仓库的目标状态，以及做了什么，下面要做什么？
还可以通过Git diff <文件名>查看文件是怎么修改的
小结：
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
2.1版本回退
小结
现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
2.2管理修改
小结
理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。
2.3撤销修改
小结
又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
2,4删除文件
二种选择：
1.确实要从版本库中删除该文件，那就使用Git rm ，并且Git commit
2.另一种情况是删错了，因为版本库里还有，所以使用Git checkout --《文件名》还原


3.远程仓库（github）
第一步：ssh-skygen -t rsa
第二步：登录github，找到ssh设置，并添加id_public.rsa中的全部内容，然后提交。即可创建成功
第三步：在github上添加远程仓库，自己就会，此处滤过
第四步：将本地的仓库推送到github上，在本地的仓库目录下进行命令，
        运行：Git remote add origin “自己的github地址”
第五步：推送内容，运行：Git push -u origin master，刷新github，即可看到
第六步：现在开始，只要本地提交，即可：Git push origin master
第七部：克隆远程库，采用Git clone 自己的Git地址（https太慢）
小结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

4.分支管理
4.1创建与合并分支
创建分支并切换到新分支：git checkout -b dev
这个命令相当于二个，分别为：git branch dev
                            git checkout dev
查看当前分支：Git branch
切换为master分支：Git checkout master
合并新分支到master：Git merge dev
删除新分支：Git branch -d dev
小结
Git鼓励大量使用分支：

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

4.2解决冲突
小结
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。 git log --graph --pretty=oneline --abbrev-commit

4.3分支管理策略
小结
Git分支十分强大，在团队开发中应该充分应用。
命令：git merge --no-ff -m "merge with no-ff" 新分支名字
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

4.4bug分支
当你在一个分支上干活时，现在上级领导有个bug要求你2个小时内改掉，首先，先保存下你现在的工作空间，运行：Git stash，这时就可以出去干其他的了，进入该分支修复
若现在master有bug，则创建一个临时分支,使用完之后删除掉就行了，创建临时分支，然后在这个分支空间里面修改bug，修改完之后，并加进分支（add，commit），然后合并到master分支中，运行Git merge --no-ff -m "merged fix bug-101“临时分支名字，最后删除，Git checkout -D bug-101,然后回到最开始的分支，继续工作，若不知道存在那，可以用：Git stash list看看，在恢复内容：用Git stash
pop（apply，需要drop来删除）


小结
rebase操作可以把本地未push的分叉提交历史整理成直线；

rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

5.标签
敲命令git tag <name>就可以打一个新标签,可以用命令git tag查看所有标签小结
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

命令git tag可以查看所有标签。
如果标签打错了，也可以删除：

$ git tag -d v0.1
Deleted tag 'v0.1' (was f15b0dd)
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。如果要推送某个标签到远程，使用命令git push origin <tagname>：或者，一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

$ git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：

$ git push origin :refs/tags/v0.9




    操作标签
    阅读: 716206
    如果标签打错了，也可以删除：

    $ git tag -d v0.1
    Deleted tag 'v0.1' (was f15b0dd)
    因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

    如果要推送某个标签到远程，使用命令git push origin <tagname>：

    $ git push origin v1.0
    Total 0 (delta 0), reused 0 (delta 0)
    To github.com:michaelliao/learngit.git
     * [new tag]         v1.0 -> v1.0
     或者，一次性推送全部尚未推送到远程的本地标签：

     $ git push origin --tags
     Total 0 (delta 0), reused 0 (delta 0)
     To github.com:michaelliao/learngit.git
      * [new tag]         v0.9 -> v0.9
      如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

      $ git tag -d v0.9
      Deleted tag 'v0.9' (was f52c633)
      然后，从远程删除。删除命令也是push，但是格式如下：

      $ git push origin :refs/tags/v0.9
      To github.com:michaelliao/learngit.git
       - [deleted]         v0.9
       要看看是否真的从远程库删除了标签，可以登陆GitHub查看。



       小结
       命令git push origin <tagname>可以推送一个本地标签；

       命令git push origin --tags可以推送全部未推送过的本地标签；

       命令git tag -d <tagname>可以删除一个本地标签；

       命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

